name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  find-servers:
    name: Find Servers
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out servers repository (to discover subfolders)
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      - name: Discover server directories
        id: set-matrix
        run: |
          # Find all directories directly under "servers/src"
          servers=$(find servers/src -mindepth 1 -maxdepth 1 -type d)
          echo "Found servers in servers/src:"
          echo "$servers"

          # Build matrix JSON for each valid directory that has a Dockerfile
          matrix="{\"include\":["
          first=true
          for server in $servers; do
            dir_name=$(basename "$server")
            if [ ! -f "$server/Dockerfile" ]; then
              echo "No Dockerfile in $server; skipping."
              continue
            fi

            if [ "$first" = true ]; then
              first=false
            else
              matrix="$matrix,"
            fi
            matrix="$matrix{\"server\":\"$dir_name\"}"
          done
          matrix="$matrix]}"

          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy
    needs: [find-servers]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-servers.outputs.matrix) }}

    steps:
      # 1) Check out the main repo
      - name: Check out this repo
        uses: actions/checkout@v3
        with:
          path: this-repo

      # 2) Check out the servers repo again
      - name: Check out servers repository
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      # 3) Optionally copy uv.lock and pyproject.toml
      #
      #    If your uv.lock and pyproject.toml live under servers/src/time/ instead of in "this-repo",
      #    you can copy them up to servers/ so that Docker sees them in the build context root.
      - name: Copy local uv.lock and pyproject.toml up
        run: |
          # Adjust the path to whichever subfolder holds these two files.
          # E.g., "servers/src/${{ matrix.server }}/uv.lock"
          if [ -f "servers/src/${{ matrix.server }}/uv.lock" ]; then
            cp "servers/src/${{ matrix.server }}/uv.lock" servers/uv.lock
            echo "Copied uv.lock up to servers/uv.lock"
          fi
          if [ -f "servers/src/${{ matrix.server }}/pyproject.toml" ]; then
            cp "servers/src/${{ matrix.server }}/pyproject.toml" servers/pyproject.toml
            echo "Copied pyproject.toml up to servers/pyproject.toml"
          fi

      # 4) Debug listing
      - name: List files in build context
        run: |
          echo "Listing servers/ after copying any uv.lock or pyproject.toml:"
          ls -al servers

      # 5) Build the Docker image from the server subfolder Dockerfile
      - name: Build Docker image
        run: |
          docker build \
            --file "servers/src/${{ matrix.server }}/Dockerfile" \
            --tag "yourorg/${{ matrix.server }}:latest" \
            servers
