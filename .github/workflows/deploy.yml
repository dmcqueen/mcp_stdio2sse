name: Deploy

on:
  push:
    branches:
      - main
    paths:
      # So we only trigger if .github/workflows/deploy.yml itself changes.
      # Adjust as needed.
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

permissions:
  contents: write  # Needed so we can push to the repo

jobs:
  ##################################################################
  # 1) Find which servers exist (and have a Dockerfile).
  ##################################################################
  find-servers:
    name: Find Servers
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out servers repository (to discover subfolders)
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      - name: Discover server directories
        id: set-matrix
        run: |
          # Find all directories directly under "servers/src"
          servers=$(find servers/src -mindepth 1 -maxdepth 1 -type d)
          echo "Found servers in servers/src:"
          echo "$servers"

          # Build matrix JSON for each valid directory that has a Dockerfile
          matrix="{\"include\":["
          first=true
          for server in $servers; do
            dir_name=$(basename "$server")
            if [ ! -f "$server/Dockerfile" ]; then
              echo "No Dockerfile in $server; skipping."
              continue
            fi

            if [ "$first" = true ]; then
              first=false
            else
              matrix="$matrix,"
            fi
            matrix="$matrix{\"server\":\"$dir_name\"}"
          done
          matrix="$matrix]}"

          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  ##################################################################
  # 2) Each server is built in parallel (matrix). 
  #    We upload the server's README as an artifact (if it exists).
  #    We do not push to GitHub here.
  ##################################################################
  build-and-collect:
    name: Build and Collect
    needs: [find-servers]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-servers.outputs.matrix) }}

    steps:
      - name: Check out servers repository
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      - name: Build Docker image
        run: |
          docker build \
            --file "servers/src/${{ matrix.server }}/Dockerfile" \
            --tag "exampleorg/${{ matrix.server }}:latest" \
            servers
        # ^ If you need a skip mechanism for, say, Python-based servers, you can still do it here.

      - name: Upload server README (if present)
        if: ${{ always() }}
        run: |
          if [ -f "servers/src/${{ matrix.server }}/README.md" ]; then
            mkdir -p "readme-${{ matrix.server }}"
            cp "servers/src/${{ matrix.server }}/README.md" "readme-${{ matrix.server }}/README.md"
          fi
        # Then upload it as an artifact with a unique name
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: readme-${{ matrix.server }}
          path: readme-${{ matrix.server }}
          if-no-files-found: ignore
        # The 'if-no-files-found: ignore' makes sure it doesn't fail if there's no README.

  ##################################################################
  # 3) Final job: waits for all matrix builds to finish, 
  #    downloads all artifacts (READMEs), checks out *this* repo, 
  #    puts them in the appropriate folders, and does a single commit/push.
  ##################################################################
  finalize-push:
    name: Collect & Push READMEs
    needs: [build-and-collect]  # must wait for all parallel builds
    runs-on: ubuntu-latest
    steps:
      # Check out this repo at full depth to handle merges properly
      - name: Check out this repo
        uses: actions/checkout@v3
        with:
          path: this-repo
          fetch-depth: 0            # so we can pull/rebase if needed
          persist-credentials: true # so we can push

      - name: Download all README artifacts
        uses: actions/download-artifact@v3
        with:
          path: collected-readmes
        # This will download *all* artifacts from prior jobs into `collected-readmes/`,
        # each artifact in its own subfolder named after the artifact.

      - name: Move READMEs into the repo
        run: |
          cd collected-readmes
          # Each artifact is in a subdirectory named readme-<server>
          for d in readme-*; do
            if [ -d "$d" ]; then
              server="${d#readme-}"  # extract name after 'readme-'
              mkdir -p "../this-repo/$server"
              if [ -f "$d/README.md" ]; then
                cp "$d/README.md" "../this-repo/$server/README.md"
              fi
            fi
          done

      - name: Commit and push
        run: |
          cd this-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Pull + rebase in case there were new commits
          git pull --rebase origin main

          # Add + commit
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Add or update READMEs from CI"
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi
