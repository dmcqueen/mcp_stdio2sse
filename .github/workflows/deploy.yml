name: Deploy

on:
  push:
    branches:
      - main
    # Adjust if you only want to run on changes in your local workflow repo
    paths:
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  find-servers:
    name: Find Servers
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out the servers repository
        uses: actions/checkout@v3
        with:
          # The external repo you want to build from:
          repository: modelcontextprotocol/servers
          # The branch or tag you want to build from:
          ref: main
          # Put the external repo into the 'servers' folder
          path: servers

      - name: Discover server directories in servers/src
        id: set-matrix
        run: |
          # Find all directories directly under "servers/src"
          servers=$(find servers/src -mindepth 1 -maxdepth 1 -type d)
          echo "Found servers in servers/src:"
          echo "$servers"

          # Build matrix JSON
          matrix="{\"include\":["
          first=true
          for server in $servers; do
            # basename of the directory
            server_name=$(basename "$server")

            # Check if there's a Dockerfile
            if [ ! -f "$server/Dockerfile" ]; then
              echo "No Dockerfile in $server. Skipping."
              continue
            fi

            if [ "$first" = true ]; then
              first=false
            else
              matrix="$matrix,"
            fi

            matrix="$matrix{\"server\":\"$server_name\"}"
          done
          matrix="$matrix]}"

          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy
    needs: [find-servers]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-servers.outputs.matrix) }}

    steps:
      - name: Check out the servers repository
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      - name: Patch Dockerfile if it references uv.lock ephemeral mounts
        run: |
          DOCKERFILE="servers/src/${{ matrix.server }}/Dockerfile"

          if grep -q "source=uv.lock" "$DOCKERFILE"; then
            echo "Detected ephemeral mount usage for uv.lock in $DOCKERFILE"
            echo "Patching Dockerfile to use COPY statements instead..."

            # 1) Remove ephemeral mount statements referencing uv.lock or pyproject.toml
            sed -i '/--mount=type=bind,source=uv.lock/d' "$DOCKERFILE"
            sed -i '/--mount=type=bind,source=pyproject.toml/d' "$DOCKERFILE"

            # 2) Insert COPY statements before the `uv sync ...` command.
            #    We run two separate sed commands so each COPY line is inserted individually.
            sed -i '/uv sync --frozen --no-install-project --no-dev --no-editable/i COPY uv.lock .' "$DOCKERFILE"
            sed -i '/uv sync --frozen --no-install-project --no-dev --no-editable/i COPY pyproject.toml .' "$DOCKERFILE"

            echo "Done patching!"
            echo "Updated Dockerfile contents:"
            cat "$DOCKERFILE"
          else
            echo "No ephemeral uv.lock usage found in $DOCKERFILE. No patch needed."
          fi

      - name: Build Docker image
        run: |
          docker build \
            --file servers/src/${{ matrix.server }}/Dockerfile \
            --tag yourorg/${{ matrix.server }}:latest \
            servers
