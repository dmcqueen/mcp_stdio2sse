name: Deploy

on:
  push:
    branches:
      - main
    # Adjust if you only want to run on changes in your local workflow repo
    paths:
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  find-servers:
    name: Find Servers
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out the servers repository
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      - name: Discover server directories in servers/src
        id: set-matrix
        run: |
          # Find all directories directly under "servers/src"
          servers=$(find servers/src -mindepth 1 -maxdepth 1 -type d)
          echo "Found servers in servers/src:"
          echo "$servers"

          # Build matrix JSON
          matrix="{\"include\":["
          first=true
          for server in $servers; do
            # basename of the directory
            server_name=$(basename "$server")

            # Check if there's a Dockerfile
            if [ ! -f "$server/Dockerfile" ]; then
              echo "No Dockerfile in $server. Skipping."
              continue
            fi

            if [ "$first" = true ]; then
              first=false
            else
              matrix="$matrix,"
            fi

            matrix="$matrix{\"server\":\"$server_name\"}"
          done
          matrix="$matrix]}"

          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy
    needs: [find-servers]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find-servers.outputs.matrix) }}

    steps:
      # 1) Check out *this* repo so we can access uv.lock (and possibly pyproject.toml)
      - name: Check out the current repository
        uses: actions/checkout@v3
        with:
          # This checks out the repo that contains this workflow
          path: this-repo

      # 2) Check out the servers repository
      - name: Check out the servers repository
        uses: actions/checkout@v3
        with:
          repository: modelcontextprotocol/servers
          ref: main
          path: servers

      # 3) Copy uv.lock (and optionally pyproject.toml) from this repo into servers
      - name: Copy uv.lock into servers
        run: |
          if [ -f this-repo/uv.lock ]; then
            cp this-repo/uv.lock servers/
            echo "Copied uv.lock to servers/."
          else
            echo "No uv.lock file found in top-level of this repo."
          fi

          If you also need pyproject.toml:
          if [ -f this-repo/pyproject.toml ]; then
            cp this-repo/pyproject.toml servers/
            echo "Copied pyproject.toml to servers/."
          else
            echo "No pyproject.toml file found in top-level of this repo."
          fi

      # 4) Build Docker image
      - name: Build Docker image
        run: |
          docker build \
            --file servers/src/${{ matrix.server }}/Dockerfile \
            --tag yourorg/${{ matrix.server }}:latest \
            servers
